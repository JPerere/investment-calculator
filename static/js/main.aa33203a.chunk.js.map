{"version":3,"sources":["Constants.js","Calculation.js","ProfileInfo.js","Results.js","App.js","reportWebVitals.js","index.js"],"names":["AccountType","PreTax","PostTax","Calculation","props","acctType","Form","Group","controlId","Label","placeholder","className","value","amountSaved","displayType","thousandSeparator","prefix","onChange","amountSavedChanged","decimalScale","Text","monthlySaved","monthlySavedChanged","ProfileInfo","startAge","startAgeChanged","allowNegative","endAge","endAgeChanged","percent","percentChanged","suffix","AmortizationButton","href","onClick","toggleAmortization","amortizationButtonText","ResultsRow","Row","Col","monthYear","balance","age","Results","useState","showAmortization","setShowAmortization","setAmortizationButtonText","interest","amortTable","rows","interestRate","replace","monthlyInterestRate","parseFloat","currentYear","Date","getFullYear","month","Math","round","push","getRows","lastItem","length","rowElements","map","row","showAmortizationDisplay","style","marginRight","App","useStateWithLocalStorage","localStorageKey","React","localStorage","getItem","setValue","useEffect","setItem","amountRothSaved","setAmountRothSaved","monthlyRothSaved","setMonthlyRothSaved","setAmountSaved","setMonthlySaved","setStartAge","setEndAge","setPercent","showConfirmReset","setShowConfirmReset","handleCloseReset","Container","lg","e","target","sm","md","Button","variant","Modal","show","onHide","Header","closeButton","Title","Body","Footer","clear","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.aa33203a.chunk.js","sourcesContent":["let AccountType = {\r\n  PreTax: \"Tax Deferred\",\r\n  PostTax: \"Roth\",\r\n};\r\n\r\nexport default AccountType;\r\n","import Button from \"react-bootstrap/Button\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport React, { useState } from \"react\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport AccountType from \"./Constants\";\r\n\r\nfunction Calculation(props) {\r\n  function convertToNumber(val) {\r\n    if (!val) {\r\n      return \"\";\r\n    }\r\n    return parseFloat(val.replace(/\\$|,/g, \"\"));\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <h2>{props.acctType}</h2>\r\n      <Form>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>\r\n            How much {props.acctType} have you saved for retirement?\r\n          </Form.Label>\r\n          <NumberFormat\r\n            placeholder=\"$1000\"\r\n            className=\"form-control\"\r\n            value={props.amountSaved}\r\n            displayType={\"input\"}\r\n            thousandSeparator={true}\r\n            prefix={\"$\"}\r\n            onChange={props.amountSavedChanged}\r\n            decimalScale=\"0\"\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            This should be the total of all your retirement accounts including\r\n            401(k)s, IRAs, 403(b)s, etc.\r\n          </Form.Text>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n          <Form.Label>\r\n            How much {props.acctType} will you contribute monthly?\r\n          </Form.Label>\r\n          <NumberFormat\r\n            className=\"form-control\"\r\n            placeholder=\"$1000\"\r\n            value={props.monthlySaved}\r\n            displayType={\"input\"}\r\n            thousandSeparator={true}\r\n            prefix={\"$\"}\r\n            onChange={props.monthlySavedChanged}\r\n            decimalScale=\"0\"\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            This is the amount you add to your retirement savings each month.\r\n            Ideally, you should save 15% of your pay toward retirement.\r\n          </Form.Text>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Calculation;\r\n","import NumberFormat from \"react-number-format\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport React, { useState } from \"react\";\r\n\r\nfunction ProfileInfo(props) {\r\n  return (\r\n    <>\r\n      <h1>Investment Calculator</h1>\r\n      <Form>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Enter your current age.</Form.Label>\r\n          <NumberFormat\r\n            placeholder=\"25\"\r\n            className=\"form-control\"\r\n            value={props.startAge}\r\n            displayType={\"input\"}\r\n            onChange={props.startAgeChanged}\r\n            decimalScale=\"0\"\r\n            allowNegative={false}\r\n          />\r\n          <Form.Text className=\"text-muted\"></Form.Text>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicEmail\">\r\n          <Form.Label>Enter the age you plan to retire.</Form.Label>\r\n          <NumberFormat\r\n            className=\"form-control\"\r\n            placeholder=\"65\"\r\n            value={props.endAge}\r\n            displayType={\"input\"}\r\n            onChange={props.endAgeChanged}\r\n            decimalScale=\"0\"\r\n            allowNegative={false}\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            If you were born in 1960 or later, 67 years old is the age at which\r\n            you can retire with full benefits.\r\n          </Form.Text>\r\n        </Form.Group>\r\n        <Form.Group controlId=\"formBasicPassword\">\r\n          <Form.Label>What do you think your annual return will be?</Form.Label>\r\n          <NumberFormat\r\n            placeholder=\"8%\"\r\n            className=\"form-control\"\r\n            value={props.percent}\r\n            displayType={\"input\"}\r\n            thousandSeparator={false}\r\n            onChange={props.percentChanged}\r\n            suffix=\"%\"\r\n            decimalScale=\"2\"\r\n          />\r\n          <Form.Text className=\"text-muted\">\r\n            This is the return your investment will generate over time.\r\n            Historically, the 30-year return of the S&amp;P 500 has been roughly\r\n            12%.\r\n          </Form.Text>\r\n        </Form.Group>\r\n      </Form>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import { Container, Row, Col } from \"react-bootstrap\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport { useState } from \"react\";\r\n\r\nfunction Results(props) {\r\n  const [showAmortization, setShowAmortization] = useState(false);\r\n  const [amortizationButtonText, setAmortizationButtonText] = useState(\r\n    \"Show Amortization\"\r\n  );\r\n  const toggleAmortization = () => {\r\n    setAmortizationButtonText(\r\n      !showAmortization ? \"Hide Amortization\" : \"Show Amortization\"\r\n    );\r\n    setShowAmortization(!showAmortization);\r\n  };\r\n  if (\r\n    props.startAge &&\r\n    props.endAge &&\r\n    props.amountSaved &&\r\n    props.monthlySaved &&\r\n    props.interest\r\n  ) {\r\n    let amortTable = null;\r\n    let rows = getRows(props);\r\n    const lastItem = rows[rows.length - 1];\r\n    if (showAmortization) {\r\n      amortTable = showAmortizationDisplay(props, rows);\r\n    }\r\n    return (\r\n      <>\r\n        <b>\r\n          <label style={{ marginRight: 10 }}>\r\n            Total At Retirement:({props.endAge})\r\n          </label>\r\n        </b>\r\n        <NumberFormat\r\n          value={lastItem.balance}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          prefix={\"$\"}\r\n        />\r\n        <br />\r\n        <AmortizationButton\r\n          amortizationButtonText={amortizationButtonText}\r\n          toggleAmortization={toggleAmortization}\r\n        />\r\n        {amortTable}\r\n      </>\r\n    );\r\n  } else {\r\n    return \"\";\r\n  }\r\n}\r\nfunction AmortizationButton(props) {\r\n  return (\r\n    <a href=\"#\" onClick={props.toggleAmortization}>\r\n      {props.amortizationButtonText}\r\n    </a>\r\n  );\r\n}\r\nfunction showAmortizationDisplay(props, rows) {\r\n  const rowElements = rows.map((row) => (\r\n    <ResultsRow\r\n      key={row.monthYear}\r\n      monthYear={row.monthYear}\r\n      balance={row.balance}\r\n      age={row.age}\r\n    ></ResultsRow>\r\n  ));\r\n  return (\r\n    <>\r\n      <Row>\r\n        <Col>\r\n          <b>Date</b>\r\n        </Col>\r\n        <Col>\r\n          <b>Balance</b>\r\n        </Col>\r\n        <Col>\r\n          <b>Age</b>\r\n        </Col>\r\n      </Row>\r\n      {rowElements}\r\n    </>\r\n  );\r\n}\r\nfunction ResultsRow(props) {\r\n  return (\r\n    <Row>\r\n      <Col>{props.monthYear}</Col>\r\n      <Col>\r\n        <NumberFormat\r\n          value={props.balance}\r\n          displayType={\"text\"}\r\n          thousandSeparator={true}\r\n          prefix={\"$\"}\r\n        />\r\n      </Col>\r\n      <Col>{props.age}</Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nfunction getRows(props) {\r\n  let interestRate = props.interest.replace(\"%\", \"\");\r\n  const monthlyInterestRate = parseFloat(interestRate) / 100 / 12;\r\n\r\n  let balance = parseFloat(\r\n    props.amountSaved.replace(\"$\", \"\").replace(\",\", \"\").replace(\".\", \"\")\r\n  );\r\n  let monthlySaved = parseFloat(\r\n    props.monthlySaved.replace(\"$\", \"\").replace(\",\", \"\").replace(\".\", \"\")\r\n  );\r\n\r\n  let ResultsRow = [];\r\n\r\n  let currentYear = new Date().getFullYear();\r\n  let age = 0;\r\n  for (age = props.startAge; age < props.endAge; age++) {\r\n    let month = 0;\r\n    for (month = 1; month <= 12; month++) {\r\n      balance =\r\n        Math.round(balance * (1 + monthlyInterestRate), 2) + monthlySaved;\r\n\r\n      ResultsRow.push({\r\n        monthYear: `${month}/${currentYear}`,\r\n        balance: balance,\r\n        age: age,\r\n      });\r\n    }\r\n    currentYear++;\r\n  }\r\n\r\n  return ResultsRow;\r\n}\r\n\r\nexport default Results;\r\n","import \"./App.css\";\r\nimport { Container, Row, Col } from \"react-bootstrap\";\r\n\r\nimport Calculation from \"./Calculation\";\r\nimport AccountType from \"./Constants\";\r\nimport ProfileInfo from \"./ProfileInfo\";\r\nimport { Button, Modal } from \"react-bootstrap\";\r\nimport { useState } from \"react\";\r\nimport React from 'react';\r\nimport Results from \"./Results\";\r\n\r\n\r\nfunction App() {\r\n\r\n  const useStateWithLocalStorage = localStorageKey => {\r\n    const [value, setValue] = React.useState(\r\n      localStorage.getItem(localStorageKey) || ''\r\n    );\r\n\r\n    React.useEffect(() => {\r\n      localStorage.setItem(localStorageKey, value);\r\n    }, [value]);\r\n\r\n    return [value, setValue];\r\n  };\r\n\r\n  const [amountRothSaved, setAmountRothSaved] = useStateWithLocalStorage(\"rothSaved\");\r\n  const [monthlyRothSaved, setMonthlyRothSaved] = useStateWithLocalStorage(\"monthlyRothSaved\");\r\n  const [amountSaved, setAmountSaved] = useStateWithLocalStorage(\"amountSaved\");\r\n  const [monthlySaved, setMonthlySaved] = useStateWithLocalStorage(\"monthlySaved\");\r\n  const [startAge, setStartAge] = useStateWithLocalStorage(\"startAge\");\r\n  const [endAge, setEndAge] = useStateWithLocalStorage(\"endAge\");\r\n  const [percent, setPercent] = useStateWithLocalStorage(\"expectedReturn\");\r\n  const [showConfirmReset, setShowConfirmReset] = useState(false);\r\n  const handleCloseReset = () => setShowConfirmReset(false);\r\n  const handleShowReset = () => setShowConfirmReset(true);\r\n\r\n  const resetValues = () => {\r\n    localStorage.clear();\r\n    setAmountRothSaved(\"\");\r\n    setMonthlyRothSaved(\"\");\r\n    setAmountSaved(\"\");\r\n    setMonthlySaved(\"\");\r\n    setStartAge(\"\");\r\n    setEndAge(\"\");\r\n    setPercent(\"\");\r\n    handleCloseReset();\r\n  };\r\n  return (\r\n    <>\r\n      <Container>\r\n        <Row>\r\n          <Col lg=\"6\">\r\n            <ProfileInfo\r\n              startAge={startAge}\r\n              startAgeChanged={(e) => setStartAge(e.target.value)}\r\n              endAge={endAge}\r\n              endAgeChanged={(e) => setEndAge(e.target.value)}\r\n              percent={percent}\r\n              percentChanged={(e) => setPercent(e.target.value)}\r\n            ></ProfileInfo>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col sm=\"12\" md=\"6\">\r\n            <Calculation\r\n              amountSaved={amountRothSaved}\r\n              amountSavedChanged={(e) => setAmountRothSaved(e.target.value)}\r\n              monthlySaved={monthlyRothSaved}\r\n              monthlySavedChanged={(e) => setMonthlyRothSaved(e.target.value)}\r\n              acctType={AccountType.PostTax}\r\n            ></Calculation>\r\n            <Results\r\n              startAge={startAge}\r\n              endAge={endAge}\r\n              amountSaved={amountRothSaved}\r\n              monthlySaved={monthlyRothSaved}\r\n              interest={percent}\r\n            ></Results>\r\n          </Col>\r\n          <Col sm=\"12\" md=\"6\">\r\n            <Calculation\r\n              amountSaved={amountSaved}\r\n              amountSavedChanged={(e) => setAmountSaved(e.target.value)}\r\n              monthlySaved={monthlySaved}\r\n              monthlySavedChanged={(e) => setMonthlySaved(e.target.value)}\r\n              acctType={AccountType.PreTax}\r\n            ></Calculation>\r\n            <Results\r\n              startAge={startAge}\r\n              endAge={endAge}\r\n              amountSaved={amountSaved}\r\n              monthlySaved={monthlySaved}\r\n              interest={percent}\r\n            ></Results>\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n            <Button variant=\"secondary\" onClick={handleShowReset}>\r\n              Reset\r\n            </Button>\r\n            <Button variant=\"primary\" className=\"ml-2\">\r\n              Calculate\r\n            </Button>\r\n          </Col>\r\n        </Row>\r\n        <Modal show={showConfirmReset} onHide={handleCloseReset}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Reset Values</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            Are you sure you want to reset all form values?\r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleCloseReset}>\r\n              Cancel\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={resetValues}>\r\n              Reset Values\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}